int djikstra(int src, int n,vector<pair<int,int>> adj[]){
    int dist[n+1];
 
    for(int i = 1;i<=n;i++) dist[i] = LONG_LONG_MAX;
    dist[src] = 0;
 
    priority_queue<pair<int,int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    pq.push({0,src});   
    vector<bool> vis(n+1, false);    
 
    while(!pq.empty()){
        auto node = pq.top().second;
        auto dis = pq.top().first;
        pq.pop();
        if(vis[node]) continue;
        vis[node] = true;
 
        for(auto it: adj[node]){
            if(it.first + dis < dist[it.second] ){
                dist[it.second] = dis + it.first;
                pq.push({dist[it.second],it.second});
            }
        }
    }
    long long ans = 0;
    for(int i = 1;i<=n;i++){
        if(dist[i]==LONG_LONG_MAX) return -1;
        ans += dist[i];
    }
    return ans;
}

int minTime(vector<vector<int>> times, int n, int k){
    vector<pair<int, int>> adj[n+1];
    for(int i = 0;i<times.size();i++){
        adj[times[i][0]].push_back({times[i][1], times[i][2]});
        adj[times[i][1]].push_back({times[i][0], times[i][2]});
    }
    return djikstra(k, n, adj);
}